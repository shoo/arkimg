module arkimg.api;

import std.json;


/*******************************************************************************
 * Encoded data in a image
 * 
 * 画像ファイルに暗号化されたデータを添付します。
 * 
 * # メタデータ
 * - `sign` 署名/検証: (Optional) ファイル作成者が公開する公開鍵で検証することのできる署名を付与します
 * - `file[].mime` MIME: (Optional) 暗号化されたデータのファイルタイプを示すMIMEデータを付与します
 * - `file[].name` ファイル名: (Optional) 暗号化されたデータのファイル名を付与します
 */
interface ArkImg
{
	/***************************************************************************
	 * 画像読込/保存
	 */
	void load(in ubyte[] binary);
	/// ditto
	immutable(ubyte)[] save() const;
	/***************************************************************************
	 * 暗号化/復号のための共通鍵を設定
	 */
	void setKey(in ubyte[] commonKey, in ubyte[] iv = null);
	/***************************************************************************
	 * 全データにまとめて署名
	 * 
	 * - メタデータの `items[*].sign` をすべての添付データに対して作成する
	 */
	void sign(in ubyte[] prvKey);
	/***************************************************************************
	 * 全データの署名をまとめて検証
	 * 
	 * - メタデータの `items[*].sign` が存在して、その署名が prvKey の公開鍵で検証できるかどうかを確認する
	 */
	bool verify(in ubyte[] pubKey) const;
	/***************************************************************************
	 * 署名を持っているか確認
	 * 
	 * - メタデータの `items[*].sign` が存在するかどうかを確認する
	 */
	bool hasSign() const;
	/***************************************************************************
	 * メタデータを設定/取得
	 */
	void metadata(in JSONValue metadata);
	/// ditto
	JSONValue metadata() const;
	/***************************************************************************
	 * ベース画像設定/取得
	 */
	void baseImage(in ubyte[] binary, string mimeType = null);
	/// ditto
	immutable(ubyte)[] baseImage(string mimeType = null);
	/***************************************************************************
	 * 添付するデータを追加(平文で指定)
	 * 
	 * - nameを指定した場合、メタデータの `items[*].name` に名前をセットする
	 * - mimeTypeを指定した場合、メタデータの `items[*].mime` にデータ種別をセットする
	 * - prvKeyを指定した場合、メタデータの `items[*].sign` に署名する
	 */
	void addSecretItem(in ubyte[] binary, string name = null, string mimeType = null, in ubyte[] prvKey = null);
	/***************************************************************************
	 * 添付するデータを全削除
	 */
	void clearSecretItems();
	/***************************************************************************
	 * 添付されている暗号化されたデータの数
	 */
	size_t getSecretItemCount() const;
	/***************************************************************************
	 * 添付されている復号されたデータ
	 */
	immutable(ubyte)[] getDecryptedItem(size_t idx) const;
	/***************************************************************************
	 * 添付されている暗号化されたデータ
	 */
	immutable(ubyte)[] getEncryptedItem(size_t idx) const;
}
